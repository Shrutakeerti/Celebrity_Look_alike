# Initialize empty lists to store losses
generator_losses = ['/content/path/to/preprocessed_images']
discriminator_losses = ['/content/path/to/preprocessed_images']

# Training loop
for epoch in range(num_epochs):
    for image_batch in dataset:  # Iterate over batches of images
        # Generate fake images for calculating generator loss
        noise = tf.random.normal([batch_size, noise_dim])
        fake_images = generator(noise, training=False)

        # Calculate generator and discriminator losses
        with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
            fake_output = discriminator(fake_images, training=True)
            real_output = discriminator(image_batch, training=True)

            generator_loss_value = generator_loss(fake_output)
            discriminator_loss_value = discriminator_loss(real_output, fake_output)
        
        # Append losses to lists
        generator_losses.append(generator_loss_value.numpy())
        discriminator_losses.append(discriminator_loss_value.numpy())

    # Print losses or save them for further analysis after each epoch
    print(f"Epoch {epoch+1}, Generator Loss: {generator_losses[-1] if generator_losses else 'N/A'}, Discriminator Loss: {discriminator_losses[-1] if discriminator_losses else 'N/A'}")
    import matplotlib.pyplot as plt

def plot_generated_images(generator, epoch, seed):
    # Generate images using the generator model
    predictions = generator(seed, training=False)
    predictions = predictions.numpy()

    # Plot generated images
    fig = plt.figure(figsize=(10, 10))
    for i in range(predictions.shape[0]):
        plt.subplot(4, 4, i + 1)
        plt.imshow(predictions[i, :, :, 0] * 127.5 + 127.5, cmap='gray')
        plt.axis('off')
    plt.savefig(f'generated_images_epoch_{epoch}.png')
    plt.show()

    # Plot sample images generated by the generator
    if (epoch + 1) % sample_interval == 0:
        plot_generated_images(generator, epoch + 1, seed)
    
# Plot loss curves
plt.figure(figsize=(10, 5))
plt.plot(generator_losses, label='Generator Loss')
plt.plot(discriminator_losses, label='Discriminator Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training Losses')
plt.legend()
plt.show()
